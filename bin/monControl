#!/usr/bin/env python3

# Utility script to manage the GUI server.  Possible commands are:
#  monControl ACTION OBJECT from CONFIG-FILE
#
# The possible objects are "server", "source" and "all", where
# "server" refers to the cherrypy web server process, "sources" to the
# group of back-end server processes attached to data sources, and
# "all" to both.
#
# The possible actions are "start", "stop", "restart" and "show",
# where "show" will print(out the full server configuration, "start")
# will start the target processes, "stop" will terminate them (it will
# literally "kill -9" them), and "restart" is "stop" plus "start".
#
# The configuration file is a python script that must define the
# properties of the "server" object and optionally set "envsetup"
# to a string of bourne shell commands that will initialise the
# environment required to run the server processes.  For further
# details on the "server" object, please see Monitoring.Core.Defs.

from glob import glob
from signal import *
import sys, os, os.path, time, re
from Monitoring.Core.Defs import ServerDef

DISTDIR = os.path.normcase(os.path.abspath(__file__)).rsplit("/", 2)[0]


# Utility function to synchronise the environment of this process
# (monControl) from the result of executing the "envsetup" from the
# configuration file.  This just runs the "envsetup" fragment in a
# subshell, redirecting all output to /dev/null, and then runs
# /bin/env at the end to print(out the value of all environment)
# variables.  That output is then parsed and the local process
# environment is synchronised where differences exist.
def syncenv(cmd):
    cmd = "exec 10>&1; exec >/dev/null; {\n" + cmd + "\n}; env 1>&10"
    for line in os.popen(cmd).read().split("\n"):
        if line != "":
            (var, value) = re.match(r"^([A-Za-z0-9_]+)=(.*)", line).groups()
            if os.environ.get(var, None) != value:
                os.environ[var] = value


# Start a background process, redirecting all its output to a log file
# and input from /dev/null.  The log file will get a "marker line" at
# the time the process is started, using bourne shell's "-x" option.
def start(cmd):
    if inpath("setsid") != "setsid":
        os.spawnvp(os.P_NOWAIT, "setsid", ["setsid", "sh", "-c", "exec %s" % cmd])
    else:
        os.spawnvp(os.P_NOWAIT, "sh", ["sh", "-c", "exec %s" % cmd])


# Find an executable in $PATH.
def inpath(cmd):
    for dir in os.getenv("PATH").split(":"):
        fname = "%s/%s" % (dir, cmd)
        if os.access(fname, os.X_OK):
            return fname
    return cmd


# Verify that an up-to-date layout.json file has been created.
# Recreate it if a newer python layout file is found.
def buildlayouts(layouts, statedir):
    import json

    class DQMItem:
        def __init__(self, layout=None):
            self.layout = layout

    class LayoutEncoder(json.JSONEncoder):
        def default(self, obj):
            if isinstance(obj, DQMItem):
                return obj.layout
            return json.JSONEncoder.default(self, obj)

    setattr(__builtins__, "DQMItem", DQMItem)
    # Filter only existing files.
    files = [f for f in layouts if os.path.exists(f)]

    lastmtime = 0
    forceReload = False
    if not os.path.exists("%s/layouts.json" % statedir):
        forceReload = True
    else:
        lastmtime = os.path.getmtime("%s/layouts.json" % statedir)

    if not forceReload:
        for layout in files:
            if os.path.getmtime(layout) > lastmtime:
                forceReload = True
                break

    if forceReload:
        print("Generating layout dictionary")
        locals = {}
        locals["dqmitems"] = {}
        allLayouts = {}
        allLayouts["dqmitems"] = {}
        with open(f"{statedir}/layouts.json", "w") as _f_out:
            for f in files:
                try:
                    print("Importing layout %s" % f)
                    with open(f) as _f_in:
                        exec(_f_in.read(), globals(), locals)
                    allLayouts["dqmitems"].update(locals["dqmitems"])
                except Exception as e:
                    print("Failed to load layout %s: %s" % (f, e))
            _f_out.write(
                json.dumps(
                    allLayouts["dqmitems"], cls=LayoutEncoder, separators=(",", ":")
                )
            )
    else:
        print("Layout dictionary is up-to-date")


# Verify that an up-to-date plug-in has been built. Delete old ones.
def build(plugin):
    for path in plugin["old"]:
        os.remove(path)
    if plugin["regenerate"]:
        srclist = " ".join([x["path"] for x in plugin["sources"]])
        cmd = [
            "make",
            "-r",
            "-k",
            "-j",
            "4",
            "-f",
            "%s/etc/makefile.plugin" % DISTDIR,
            "PLUGIN_DIR=%s" % plugin["dir"],
            "PLUGIN_BINARY=%s" % plugin["binary"],
            "PLUGIN_SOURCES=%s" % srclist,
        ]
        sys.stdout.write("(Re)building plug-in %s\n" % plugin["name"])
        sys.stdout.write(
            "+ "
            + " ".join([x.encode("unicode_escape").decode("utf-8") for x in cmd])
            + "\n"
        )
        sys.stdout.flush()
        if not os.path.exists(plugin["dir"]):
            os.makedirs(plugin["dir"])
        for path in glob(plugin["dir"] + "/*.o"):
            os.remove(path)
        ret = os.spawnvp(os.P_WAIT, cmd[0], cmd)
        for path in glob(plugin["dir"] + "/*.o"):
            os.remove(path)
        if ret != 0:
            sys.stderr.write(
                "%s: failed to rebuild plug-in, exit code %d" % (plugin["name"], ret)
            )
            sys.exit(1)
    else:
        sys.stdout.write("Plug-in %s is up-to-date\n" % plugin["name"])
        sys.stdout.flush()


# Check command line options.
if len(sys.argv) != 5 or sys.argv[3] != "from":
    sys.stderr.write("Usage: %s ACTION OBJECT from CONFIG-FILE" % sys.argv[0])
    sys.exit(1)

action = sys.argv[1]
object = sys.argv[2]
cfgfile = sys.argv[4]

if (
    object != "sources"
    and object != "server"
    and object != "plugins"
    and object != "all"
    and object != "layouts"
):
    sys.stderr.write(
        ("Unrecognised object '%s', expected one of:")
        + " sources, server, plugins, layouts, all"
    )
    sys.exit(1)

if action not in ("stop", "restart", "start", "rebuild", "verify", "show"):
    sys.stderr.write(
        ("Unrecognised action '%s', execpted one of:")
        + " start, stop, restart, rebuild, verify, show"
    ) % action
    sys.exit(1)

# Read and validate the configuration file.
try:
    x = {"server": ServerDef(), "envsetup": "", "__file__": cfgfile, "LAYOUTS": []}
    with open(cfgfile) as _f:
        exec(_f.read(), globals(), x)
    cfg = x["server"]
    envsetup = x["envsetup"]

    err = cfg.validate()
    if err != None:
        sys.stderr.write("%s: %s" % (cfgfile, err))
        sys.exit(1)
except Exception as e:
    sys.stderr.write("%s: cannot read configuration, error was:\n%s" % (cfgfile, e))
    sys.exit(1)

# If restarting or stopping, care for that first.  For all processes
# affected, lookis for the server process "pid" file and then killing
# that process group and process with signal 9 (SIGKILL).
if action == "restart" or action == "stop":
    if object == "server" or object == "all":
        sys.stdout.write(
            "Stopping server at port %d in %s:" % (cfg.port, cfg.serverDir)
        )
        sys.stdout.flush()
        for pidfile in ["%s/pid" % cfg.serverDir] + glob("%s/*/pid" % cfg.serverDir):
            if os.path.exists(pidfile):
                with open(pidfile) as _f:
                    pid = int(_f.readline())
                os.remove(pidfile)
                sys.stdout.write(" %s" % pid)
                sys.stdout.flush()
                stopfile = re.sub(r"/pid$", "/stop", pidfile)
                if not os.path.exists(stopfile):
                    with open(stopfile, "w") as _f:
                        pass

                for sig, grace in (
                    (SIGINT, 1),
                    (SIGINT, 3),
                    (SIGINT, 5),
                    (SIGINT, 5),
                    (SIGKILL, 0),
                ):
                    # if the process is still alive, wait for the grace period
                    # the process is alive if we can send null (0) signal to it
                    try:
                        os.killpg(pid, 0)
                        time.sleep(grace)
                    except:
                        break

                    # now send the signal; the process *may* have quit already
                    # first send the signal to the process group, then process.
                    try:
                        os.killpg(pid, sig)
                    except:
                        pass
                    try:
                        os.kill(pid, sig)
                    except:
                        pass
                    sys.stdout.write(".")
                    sys.stdout.flush()
                    sys.stdout.flush()
        sys.stdout.write("\n")

# If restarting or starting, first initialise the environment from to
# the configuration file spec, and then for each server process create
# a server working directory and start the process, redirecting its
# output to a log file in the working directory.  Each server will
# create its own "pid" file, we don't do that here.
if action == "restart" or action == "start":
    cmdpfx = (cfg.instrument and (cfg.instrument + " ")) or ""

    if envsetup:
        syncenv(envsetup)

    if object == "sources" or object == "plugins" or object == "all":
        for plugin in cfg.plugins:
            build(plugin)
    if object == "layouts" or object == "all":
        buildlayouts(x["LAYOUTS"], cfg.serverDir)

    ports = {}
    if object == "server" or object == "all":
        print("Starting server at port %d in %s" % (cfg.port, cfg.serverDir))
        dir = cfg.serverDir
        if not os.path.exists(dir):
            os.makedirs(dir)
        if not os.path.exists(dir + "/sessions"):
            os.makedirs(dir + "/sessions")
        if os.path.exists(dir + "/stop"):
            os.remove(dir + "/stop")
        start(
            "%spython %s %s > %s 2>&1"
            % (cmdpfx, inpath("monGui"), cfgfile, cfg.logFile)
        )

# Rebuilding just redoes the plug-in but nothing else.
if action == "rebuild":
    if envsetup:
        syncenv(envsetup)

    if object == "sources" or object == "plugins" or object == "all":
        for plugin in cfg.plugins:
            build(plugin)
    if object == "layouts" or object == "all":
        buildlayouts(x["LAYOUTS"], cfg.serverDir)

# Verification is equivalent to just loading the configuration.
# (FIXME: check paths and such?)
if action == "verify":
    pass

# Dump the configuration contents in somewhat readable manner.
if action == "show":
    if object == "plugins" or object == "all":
        print("Plug-ins:")
        for p in cfg.plugins:
            print("  %s:" % p["name"])
            for arg in ("regenerate", "id", "dir", "binary", "old"):
                print("    %-12s %s" % (arg, p[arg]))
            print(
                "    %-12s %s"
                % ("sources:", ("\n" + 17 * " ").join((repr(x) for x in p["sources"])))
            )

    if object == "sources" or object == "all":
        print("Sources:")
        for s in cfg.sources:
            print("  %s:" % s[0])
            print("    %-12s %s" % ("label:", s[1]))
            print(
                "    %-12s %s"
                % ("params:", ("\n" + 17 * " ").join((repr(x) for x in s[2])))
            )

    if object == "server" or object == "all":
        print("Server:")
        done = {}
        keys = ["port", "localBase", "baseUrl", "serverDir", "title"]
        keys.extend(sorted(cfg.__dict__.keys()))
        for k in keys:
            if k not in done and k != "sources" and k != "plugins":
                print("  %-14s %s" % (k + ":", getattr(cfg, k, "(None)")))
                done[k] = 1

sys.exit(0)
