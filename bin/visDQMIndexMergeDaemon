#!/usr/bin/env python3

import os, time, sys
from glob import glob
from Monitoring.Core.Utils.Common import logme
from traceback import print_exc
from subprocess import Popen, PIPE
from fcntl import lockf, LOCK_EX, LOCK_UN


# Command line parameters
DROPBOX = sys.argv[1]  # DROPBOX for partial indexes
INDEX = sys.argv[2]  # GUI's index location

# ImportDaemon Dropbox, this parameter is used to determine the time
# the IndexMergeDaemon will sleep before continuing with its work,
# this allows synchronization between the ImportDaemon and
# IndexMergeDaemon, living the latter ample time to keep up with
# single file registration
IMPORTDBX = ""
if len(sys.argv) == 4:
    IMPORTDBX = sys.argv[3]

# Global Constants
WAITTIME = 3600 * 1  # Sleep time for merges
WAITTIME2 = 10  # Sleep time between cicles
AVGITIME = 4 * 60  # Average Time to register a run


# --------------------------------------------------------------------


def runme(cmd, *args, **keys):
    try:
        fcmd = cmd % args
        scall = Popen(fcmd.split(" "), stdout=PIPE, stderr=PIPE)
        (sc_stdout, sc_stderr) = scall.communicate()
        retcodes = "retcodes" in keys and keys["retcodes"] or (0,)
        assert scall.returncode in retcodes

    except AssertionError as e:
        logme(
            "ERROR: Command execution failed ('%s') with error message: %s",
            fcmd,
            sc_stderr.decode("utf-8").replace("\n", "\016"),
        )

    return (scall.returncode, sc_stdout.decode("utf-8"), sc_stderr.decode("utf-8"))


def current_umask():
    val = os.umask(0)
    os.umask(val)
    return val


# --------------------------------------------------------------------
while True:
    try:
        indexes = {}

        # Get list of indexes from the drop box
        for cd, subs, files in os.walk(DROPBOX):
            for i in subs:
                path = "%s/%s" % (DROPBOX, i)
                indexes.setdefault(path, os.path.realpath(path))

        # Start merging
        for i in sorted(indexes.keys()):
            with open(f"{INDEX}/lock", "w+") as lFile:
                try:
                    lockf(lFile, LOCK_EX)
                    lFile.write(str(os.getpid()))

                    # Print a small diagnostic
                    logme("INFO: Starting merge of index %s", i)
                    rc, so, se = runme("visDQMIndex merge %s %s", INDEX, indexes[i])
                    if rc != 0:
                        logme("command failed with exit code %d", rc)
                        assert False, "%s\n%s" % (so, se)

                    logme("INFO: Finished merging index %s", i)

                finally:
                    # Clean up, if something fails we do not want to try and  merge
                    # the same index
                    lockf(lFile, LOCK_UN)
                    lFile.close()
                    os.remove(i)

                # shutil.rmtree(indexes[i])
                if not IMPORTDBX:
                    continue

                sleepTime = min(
                    len(glob("%s/*.dqminfo" % IMPORTDBX)) * AVGITIME, WAITTIME
                )
                time.sleep(sleepTime)

    except KeyboardInterrupt as e:
        sys.exit(0)

    except Exception as e:
        logme("error: %s", e)
        print_exc()

    time.sleep(WAITTIME2)
