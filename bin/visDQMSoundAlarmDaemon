#!/usr/bin/env python3

import re
import time
import sys
import json
from traceback import print_exc
from Monitoring.Core.Utils.Common import logme
from Monitoring.Core.Utils.SoundAlarm import send_sound_msg, send_email_msg, run_test

from urllib import parse, request, error


# IMPORTANT: If you want to play a test sound, just start the program with
# all the usual parameters, but add "test" as last parameter.
# Then the program will not start in daemon mode, but just send a test sound to
# the sound server.

# --------------------------------------------------------------------
# The SoundAlarm agent monitors the state of alarms in histograms
# located in ERROR_FOLDER. This location is a layout with a selection
# of MEs that follow very closely the state of the detector. The agent
# makes the following assumptions:
# 1. Each ME listed in the layout will raise an alarm if its QT fails,
# however, the ME and QT have to be done in such way that, if the
# condition for the QT to fail ceases, the QT should be successful
# and thus the alarm should be turned off.
# 2. Trend plots located in this layout should *not* raise alarms, if
# they do, they must comply with assumption 1.
# 3. The GUI that is specified by BASEURL has a Live source.
#
# Once a ME raises an alarm it would be immediately broadcasted, after
# that it gets bundled with all actives alarms so that only one
# message is broadcasted every REMINDERINTERVAL seconds. An alarm
# ceases to be broadcasted if it has been sent more than REBROADCAST
# times. In order to generate the most efficient use of the CMS-WOW
# system, the global clock gets reset every time we pass from 0 alarms
# to at least 1 alarm.

# There is an extension to this tool called visDQMSoundAlarmManager.
# It's a small web app which displays all plots located in ERROR_FOLDER
# and provides an ability to disable alarms for chosen plots.
# This tool queries the API of the visDQMSoundAlarmManager for the list
# of disabled plots before sending the alarms.

# --------------------------------------------------------------------
# Command line parameters
BASEURL = parse.quote(sys.argv[1], ":/-_")  # GUI Server's URL
SOUNDSERVER = sys.argv[2]  # CMS-WOW server's name
PORT = int(sys.argv[3])  # Listening port on the CMS-WOW server
REMINDERINTERVAL = int(sys.argv[4])  # Seconds between sonourous alarms
REBROADCAST = int(sys.argv[5])  # Number of times the same alarm is broadcasted
if len(sys.argv) >= 7:
    EMAIL_ADDRESSES = sys.argv[6]  # Emails to notify, multiple addresses are
    # accepted, separated by ','
else:
    EMAIL_ADDRESSES = ""

# URL to get a list of disabled alarms
ALARM_MANAGER_URL = "http://localhost:8031/disabled"
if len(sys.argv) >= 8:
    ALARM_MANAGER_URL = sys.argv[7]

# To enable the special "test-mode" add a 8th argument "test"
# Otherwise the daemon does its normal stuff (which is good)
if len(sys.argv) >= 9:
    IS_TEST = sys.argv[8] == "test"
else:
    IS_TEST = False


# GLOBAL CONSTANTS
# location of the error folder that contains alarms histos.
ERROR_FOLDER = parse.quote("00 Shift/Errors", ":/-_")
DATA_LOCATION = parse.quote("data/json/live/1/Global/Online/ALL", ":/-_")


WAITTIME = 30


# --------------------------------------------------------------------

# Construct URL pointing to the Error folder
sr = re.search(r"dqm/(online)", BASEURL)
if not sr:
    logme("FATAL: Could not identify the site from the base url")
    sys.exit(1)

BASEURL = "%s/%s/%s/" % (BASEURL, DATA_LOCATION, ERROR_FOLDER)


# This method will start the actual daemon, checking the GUI every WAITTIME
# seconds
def run_daemon():
    lastMessage = 0
    remindersSent = 0

    noRun = True
    activeURLErrors = 0

    knownAlarms = set()
    while True:
        try:
            now = time.time()

            # Get data from DQM GUI:
            datareq = request.Request(BASEURL)
            result = request.build_opener(request.ProxyHandler({})).open(datareq)
            state = result.read()
            # Arriving here, connection to GUI was successful, resetting error
            # counter.
            activeURLErrors = 0

            state = json.loads(state)

            ## Detect No run state
            if noRun == False and len(state["contents"]) <= 1:
                noRun = True
                lastMessage = 0

            if noRun and len(state["contents"]) > 1:
                noRun = False

            if noRun:
                logme("Daemon woke up. No run going on. Going back to sleep.")
                time.sleep(WAITTIME)
                continue

            # Find new alarm histos, and update alarm states
            knownNewAlarms = set()
            for histo in state["contents"]:
                if "path" in histo:
                    name = histo["path"]
                else:
                    continue

                # Get the disasbled alarms from the alarm manager:
                disabledAlarms = []
                try:
                    datareq = request.Request(ALARM_MANAGER_URL)
                    result = request.build_opener(request.ProxyHandler({})).open(
                        datareq
                    )
                    disabledAlarms = json.loads(result.read())
                except:
                    # If we're unable to get disabled alarms, assume that all of them are enabled
                    pass

                if histo["properties"]["report"]["alarm"] == 1:
                    if name in disabledAlarms:
                        logme(
                            f"Histo caused an alarm but it was disabled in the alarm manager: {name}"
                        )
                    else:
                        knownNewAlarms.add(name)
                        logme(f"Info from the DQM GUI: {str(histo)}")

            # should alarm be triggered
            alarmsNew = knownNewAlarms.difference(knownAlarms)
            sendMessage = False
            isReminder = False

            # alarmsRecovered = knownAlarms.difference(knownNewAlarms)
            if len(alarmsNew) > 0:
                sendMessage, isReminder = True, False
                lastMessage = now
                remindersSent = 0
            elif len(knownNewAlarms) and remindersSent < REBROADCAST:
                # situation has not changed, but we still need to 'remind' the shifter
                elapsed = now - lastMessage
                delay = (remindersSent + 1) * REMINDERINTERVAL

                if elapsed >= delay:
                    remindersSent += 1
                    sendMessage, isReminder = True, True

            if sendMessage:
                logme("Info from the DQM GUI: %s" % str(histo))

                msgs = []
                if isReminder:
                    msgs.append("Reminder. ")
                else:
                    msgs.append("")

                if len(knownNewAlarms) > 1:
                    msgs.append("There are %d DQM alarms." % len(knownNewAlarms))
                else:
                    msgs.append("There is %d DQM alarm." % len(knownNewAlarms))

                msgs.append("\n\nAlarm names are:")
                for name in knownNewAlarms:
                    msgs.append("\n  %s" % name)
                    if name not in knownAlarms:
                        msgs.append(" (new)")

                msgs.append("\n")
                msg = "".join(msgs)

                spoken_msgs = msgs[:2] + [" Check plots in the DQM Error folder."]
                spoken_msg = "".join(spoken_msgs).replace("DQM", "D Q M")

                send_sound_msg(
                    msg=msg,
                    spoken_msg=spoken_msg,
                    soundserver=SOUNDSERVER,
                    port=PORT,
                    email_addresses=EMAIL_ADDRESSES,
                )

            knownAlarms = knownNewAlarms

            # Done some heartbeat logging:
            logme(
                f"Daemon woke up. A run was going on. {len(knownAlarms)} active alarm(s)."
            )

        except KeyboardInterrupt as e:
            sys.exit(0)

        except error.URLError as e:
            activeURLErrors += 1
            # It happens from time to time that the daemon can't connect to the GUI
            # This can have many reasons. Usually it's solved in the next cycle, so
            # there is no point in alerting people.
            if activeURLErrors <= 3:
                logme(
                    f"Daemon woke up. Couldn't connect to GUI ({activeURLErrors}). Going back to "
                    "sleep."
                )
            # However, when we see more then 3 times in a row that the network
            # connection is failing, then we start sending emails:
            else:
                logme(
                    f"Daemon woke up. Couldn't connect to GUI for the {activeURLErrors}th time! "
                    "Sending mail and going back to sleep."
                )
                logme(f"BASEURL: {BASEURL}")
                logme(f"ERROR: {e}")
                print_exc()
                send_email_msg(msg=f"ERROR: {e}\n\n", email_addresses=EMAIL_ADDRESSES)
                # Reset counter to -20. Otherwise you would start receiving a message
                # every 30 seconds now.
                # At least this way, the next email will only be in >10 minutes.
                activeURLErrors = -20

        except Exception as e:
            logme(f"ERROR: {e}")
            print_exc()
            send_email_msg(msg=f"ERROR: {e}\n\n", email_addresses=EMAIL_ADDRESSES)

        time.sleep(WAITTIME)


if IS_TEST:
    # If we're in test mode
    run_test(soundserver=SOUNDSERVER, port=PORT, email_addresses=EMAIL_ADDRESSES)
else:
    # After starting the script, we wait a while before we try, because maybe the
    # GUI isn't started yet.
    time.sleep(10)
    # Now start the real daemon
    run_daemon()
