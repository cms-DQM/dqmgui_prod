// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DQM/StreamSample.proto

#ifndef PROTOBUF_DQM_2fStreamSample_2eproto__INCLUDED
#define PROTOBUF_DQM_2fStreamSample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_DQM_2fStreamSample_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStreamSample_HeaderImpl();
void InitDefaultsStreamSample_Header();
void InitDefaultsStreamSample_MonitorElementInfoImpl();
void InitDefaultsStreamSample_MonitorElementInfo();
void InitDefaultsStreamSample_MonitorElementImpl();
void InitDefaultsStreamSample_MonitorElement();
void InitDefaultsStreamSample_MERootImpl();
void InitDefaultsStreamSample_MERoot();
void InitDefaultsStreamSample_GenericCompressedImpl();
void InitDefaultsStreamSample_GenericCompressed();
void InitDefaultsStreamSampleImpl();
void InitDefaultsStreamSample();
inline void InitDefaults() {
  InitDefaultsStreamSample_Header();
  InitDefaultsStreamSample_MonitorElementInfo();
  InitDefaultsStreamSample_MonitorElement();
  InitDefaultsStreamSample_MERoot();
  InitDefaultsStreamSample_GenericCompressed();
  InitDefaultsStreamSample();
}
}  // namespace protobuf_DQM_2fStreamSample_2eproto
namespace dqmgui {
class StreamSample;
class StreamSampleDefaultTypeInternal;
extern StreamSampleDefaultTypeInternal _StreamSample_default_instance_;
class StreamSample_GenericCompressed;
class StreamSample_GenericCompressedDefaultTypeInternal;
extern StreamSample_GenericCompressedDefaultTypeInternal _StreamSample_GenericCompressed_default_instance_;
class StreamSample_Header;
class StreamSample_HeaderDefaultTypeInternal;
extern StreamSample_HeaderDefaultTypeInternal _StreamSample_Header_default_instance_;
class StreamSample_MERoot;
class StreamSample_MERootDefaultTypeInternal;
extern StreamSample_MERootDefaultTypeInternal _StreamSample_MERoot_default_instance_;
class StreamSample_MonitorElement;
class StreamSample_MonitorElementDefaultTypeInternal;
extern StreamSample_MonitorElementDefaultTypeInternal _StreamSample_MonitorElement_default_instance_;
class StreamSample_MonitorElementInfo;
class StreamSample_MonitorElementInfoDefaultTypeInternal;
extern StreamSample_MonitorElementInfoDefaultTypeInternal _StreamSample_MonitorElementInfo_default_instance_;
}  // namespace dqmgui
namespace dqmgui {

// ===================================================================

class StreamSample_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dqmgui.StreamSample.Header) */ {
 public:
  StreamSample_Header();
  virtual ~StreamSample_Header();

  StreamSample_Header(const StreamSample_Header& from);

  inline StreamSample_Header& operator=(const StreamSample_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSample_Header(StreamSample_Header&& from) noexcept
    : StreamSample_Header() {
    *this = ::std::move(from);
  }

  inline StreamSample_Header& operator=(StreamSample_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSample_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSample_Header* internal_default_instance() {
    return reinterpret_cast<const StreamSample_Header*>(
               &_StreamSample_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StreamSample_Header* other);
  friend void swap(StreamSample_Header& a, StreamSample_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSample_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSample_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSample_Header& from);
  void MergeFrom(const StreamSample_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSample_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes streamerInfo = 7;
  bool has_streamerinfo() const;
  void clear_streamerinfo();
  static const int kStreamerInfoFieldNumber = 7;
  const ::std::string& streamerinfo() const;
  void set_streamerinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_streamerinfo(::std::string&& value);
  #endif
  void set_streamerinfo(const char* value);
  void set_streamerinfo(const void* value, size_t size);
  ::std::string* mutable_streamerinfo();
  ::std::string* release_streamerinfo();
  void set_allocated_streamerinfo(::std::string* streamerinfo);

  // required int32 runNumber = 1;
  bool has_runnumber() const;
  void clear_runnumber();
  static const int kRunNumberFieldNumber = 1;
  ::google::protobuf::int32 runnumber() const;
  void set_runnumber(::google::protobuf::int32 value);

  // required uint32 numObjects = 2;
  bool has_numobjects() const;
  void clear_numobjects();
  static const int kNumObjectsFieldNumber = 2;
  ::google::protobuf::uint32 numobjects() const;
  void set_numobjects(::google::protobuf::uint32 value);

  // required uint64 numEvents = 3;
  bool has_numevents() const;
  void clear_numevents();
  static const int kNumEventsFieldNumber = 3;
  ::google::protobuf::uint64 numevents() const;
  void set_numevents(::google::protobuf::uint64 value);

  // required uint64 numLumiSections = 4;
  bool has_numlumisections() const;
  void clear_numlumisections();
  static const int kNumLumiSectionsFieldNumber = 4;
  ::google::protobuf::uint64 numlumisections() const;
  void set_numlumisections(::google::protobuf::uint64 value);

  // required uint64 runStartTime = 5;
  bool has_runstarttime() const;
  void clear_runstarttime();
  static const int kRunStartTimeFieldNumber = 5;
  ::google::protobuf::uint64 runstarttime() const;
  void set_runstarttime(::google::protobuf::uint64 value);

  // required uint64 processedTime = 6;
  bool has_processedtime() const;
  void clear_processedtime();
  static const int kProcessedTimeFieldNumber = 6;
  ::google::protobuf::uint64 processedtime() const;
  void set_processedtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dqmgui.StreamSample.Header)
 private:
  void set_has_runnumber();
  void clear_has_runnumber();
  void set_has_numobjects();
  void clear_has_numobjects();
  void set_has_numevents();
  void clear_has_numevents();
  void set_has_numlumisections();
  void clear_has_numlumisections();
  void set_has_runstarttime();
  void clear_has_runstarttime();
  void set_has_processedtime();
  void clear_has_processedtime();
  void set_has_streamerinfo();
  void clear_has_streamerinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr streamerinfo_;
  ::google::protobuf::int32 runnumber_;
  ::google::protobuf::uint32 numobjects_;
  ::google::protobuf::uint64 numevents_;
  ::google::protobuf::uint64 numlumisections_;
  ::google::protobuf::uint64 runstarttime_;
  ::google::protobuf::uint64 processedtime_;
  friend struct ::protobuf_DQM_2fStreamSample_2eproto::TableStruct;
  friend void ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_HeaderImpl();
};
// -------------------------------------------------------------------

class StreamSample_MonitorElementInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dqmgui.StreamSample.MonitorElementInfo) */ {
 public:
  StreamSample_MonitorElementInfo();
  virtual ~StreamSample_MonitorElementInfo();

  StreamSample_MonitorElementInfo(const StreamSample_MonitorElementInfo& from);

  inline StreamSample_MonitorElementInfo& operator=(const StreamSample_MonitorElementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSample_MonitorElementInfo(StreamSample_MonitorElementInfo&& from) noexcept
    : StreamSample_MonitorElementInfo() {
    *this = ::std::move(from);
  }

  inline StreamSample_MonitorElementInfo& operator=(StreamSample_MonitorElementInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSample_MonitorElementInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSample_MonitorElementInfo* internal_default_instance() {
    return reinterpret_cast<const StreamSample_MonitorElementInfo*>(
               &_StreamSample_MonitorElementInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StreamSample_MonitorElementInfo* other);
  friend void swap(StreamSample_MonitorElementInfo& a, StreamSample_MonitorElementInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSample_MonitorElementInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSample_MonitorElementInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSample_MonitorElementInfo& from);
  void MergeFrom(const StreamSample_MonitorElementInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSample_MonitorElementInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double nbins = 1;
  bool has_nbins() const;
  void clear_nbins();
  static const int kNbinsFieldNumber = 1;
  double nbins() const;
  void set_nbins(double value);

  // required double mean = 2;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 2;
  double mean() const;
  void set_mean(double value);

  // required double rms = 3;
  bool has_rms() const;
  void clear_rms();
  static const int kRmsFieldNumber = 3;
  double rms() const;
  void set_rms(double value);

  // required double bound_min = 4;
  bool has_bound_min() const;
  void clear_bound_min();
  static const int kBoundMinFieldNumber = 4;
  double bound_min() const;
  void set_bound_min(double value);

  // required double bound_max = 5;
  bool has_bound_max() const;
  void clear_bound_max();
  static const int kBoundMaxFieldNumber = 5;
  double bound_max() const;
  void set_bound_max(double value);

  // @@protoc_insertion_point(class_scope:dqmgui.StreamSample.MonitorElementInfo)
 private:
  void set_has_nbins();
  void clear_has_nbins();
  void set_has_mean();
  void clear_has_mean();
  void set_has_rms();
  void clear_has_rms();
  void set_has_bound_min();
  void clear_has_bound_min();
  void set_has_bound_max();
  void clear_has_bound_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double nbins_;
  double mean_;
  double rms_;
  double bound_min_;
  double bound_max_;
  friend struct ::protobuf_DQM_2fStreamSample_2eproto::TableStruct;
  friend void ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElementInfoImpl();
};
// -------------------------------------------------------------------

class StreamSample_MonitorElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dqmgui.StreamSample.MonitorElement) */ {
 public:
  StreamSample_MonitorElement();
  virtual ~StreamSample_MonitorElement();

  StreamSample_MonitorElement(const StreamSample_MonitorElement& from);

  inline StreamSample_MonitorElement& operator=(const StreamSample_MonitorElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSample_MonitorElement(StreamSample_MonitorElement&& from) noexcept
    : StreamSample_MonitorElement() {
    *this = ::std::move(from);
  }

  inline StreamSample_MonitorElement& operator=(StreamSample_MonitorElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSample_MonitorElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSample_MonitorElement* internal_default_instance() {
    return reinterpret_cast<const StreamSample_MonitorElement*>(
               &_StreamSample_MonitorElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StreamSample_MonitorElement* other);
  friend void swap(StreamSample_MonitorElement& a, StreamSample_MonitorElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSample_MonitorElement* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSample_MonitorElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSample_MonitorElement& from);
  void MergeFrom(const StreamSample_MonitorElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSample_MonitorElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dqmgui.StreamSample.MonitorElementInfo info = 10;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 10;
  const ::dqmgui::StreamSample_MonitorElementInfo& info(int index) const;
  ::dqmgui::StreamSample_MonitorElementInfo* mutable_info(int index);
  ::dqmgui::StreamSample_MonitorElementInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElementInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElementInfo >&
      info() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes data = 11;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 11;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes qt = 12;
  bool has_qt() const;
  void clear_qt();
  static const int kQtFieldNumber = 12;
  const ::std::string& qt() const;
  void set_qt(const ::std::string& value);
  #if LANG_CXX11
  void set_qt(::std::string&& value);
  #endif
  void set_qt(const char* value);
  void set_qt(const void* value, size_t size);
  ::std::string* mutable_qt();
  ::std::string* release_qt();
  void set_allocated_qt(::std::string* qt);

  // required int32 category = 2;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  ::google::protobuf::int32 category() const;
  void set_category(::google::protobuf::int32 value);

  // required int32 lumibegin = 3;
  bool has_lumibegin() const;
  void clear_lumibegin();
  static const int kLumibeginFieldNumber = 3;
  ::google::protobuf::int32 lumibegin() const;
  void set_lumibegin(::google::protobuf::int32 value);

  // required uint32 properties = 4;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  ::google::protobuf::uint32 properties() const;
  void set_properties(::google::protobuf::uint32 value);

  // required uint32 dataLength = 5;
  bool has_datalength() const;
  void clear_datalength();
  static const int kDataLengthFieldNumber = 5;
  ::google::protobuf::uint32 datalength() const;
  void set_datalength(::google::protobuf::uint32 value);

  // required uint32 qtestLength = 6;
  bool has_qtestlength() const;
  void clear_qtestlength();
  static const int kQtestLengthFieldNumber = 6;
  ::google::protobuf::uint32 qtestlength() const;
  void set_qtestlength(::google::protobuf::uint32 value);

  // required uint32 objectLength = 7;
  bool has_objectlength() const;
  void clear_objectlength();
  static const int kObjectLengthFieldNumber = 7;
  ::google::protobuf::uint32 objectlength() const;
  void set_objectlength(::google::protobuf::uint32 value);

  // required double entries = 9;
  bool has_entries() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 9;
  double entries() const;
  void set_entries(double value);

  // required uint32 tag = 8;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 8;
  ::google::protobuf::uint32 tag() const;
  void set_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dqmgui.StreamSample.MonitorElement)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_category();
  void clear_has_category();
  void set_has_lumibegin();
  void clear_has_lumibegin();
  void set_has_properties();
  void clear_has_properties();
  void set_has_datalength();
  void clear_has_datalength();
  void set_has_qtestlength();
  void clear_has_qtestlength();
  void set_has_objectlength();
  void clear_has_objectlength();
  void set_has_tag();
  void clear_has_tag();
  void set_has_entries();
  void clear_has_entries();
  void set_has_data();
  void clear_has_data();
  void set_has_qt();
  void clear_has_qt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElementInfo > info_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr qt_;
  ::google::protobuf::int32 category_;
  ::google::protobuf::int32 lumibegin_;
  ::google::protobuf::uint32 properties_;
  ::google::protobuf::uint32 datalength_;
  ::google::protobuf::uint32 qtestlength_;
  ::google::protobuf::uint32 objectlength_;
  double entries_;
  ::google::protobuf::uint32 tag_;
  friend struct ::protobuf_DQM_2fStreamSample_2eproto::TableStruct;
  friend void ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElementImpl();
};
// -------------------------------------------------------------------

class StreamSample_MERoot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dqmgui.StreamSample.MERoot) */ {
 public:
  StreamSample_MERoot();
  virtual ~StreamSample_MERoot();

  StreamSample_MERoot(const StreamSample_MERoot& from);

  inline StreamSample_MERoot& operator=(const StreamSample_MERoot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSample_MERoot(StreamSample_MERoot&& from) noexcept
    : StreamSample_MERoot() {
    *this = ::std::move(from);
  }

  inline StreamSample_MERoot& operator=(StreamSample_MERoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSample_MERoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSample_MERoot* internal_default_instance() {
    return reinterpret_cast<const StreamSample_MERoot*>(
               &_StreamSample_MERoot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StreamSample_MERoot* other);
  friend void swap(StreamSample_MERoot& a, StreamSample_MERoot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSample_MERoot* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSample_MERoot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSample_MERoot& from);
  void MergeFrom(const StreamSample_MERoot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSample_MERoot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes rawdata = 1;
  bool has_rawdata() const;
  void clear_rawdata();
  static const int kRawdataFieldNumber = 1;
  const ::std::string& rawdata() const;
  void set_rawdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rawdata(::std::string&& value);
  #endif
  void set_rawdata(const char* value);
  void set_rawdata(const void* value, size_t size);
  ::std::string* mutable_rawdata();
  ::std::string* release_rawdata();
  void set_allocated_rawdata(::std::string* rawdata);

  // @@protoc_insertion_point(class_scope:dqmgui.StreamSample.MERoot)
 private:
  void set_has_rawdata();
  void clear_has_rawdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rawdata_;
  friend struct ::protobuf_DQM_2fStreamSample_2eproto::TableStruct;
  friend void ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MERootImpl();
};
// -------------------------------------------------------------------

class StreamSample_GenericCompressed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dqmgui.StreamSample.GenericCompressed) */ {
 public:
  StreamSample_GenericCompressed();
  virtual ~StreamSample_GenericCompressed();

  StreamSample_GenericCompressed(const StreamSample_GenericCompressed& from);

  inline StreamSample_GenericCompressed& operator=(const StreamSample_GenericCompressed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSample_GenericCompressed(StreamSample_GenericCompressed&& from) noexcept
    : StreamSample_GenericCompressed() {
    *this = ::std::move(from);
  }

  inline StreamSample_GenericCompressed& operator=(StreamSample_GenericCompressed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSample_GenericCompressed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSample_GenericCompressed* internal_default_instance() {
    return reinterpret_cast<const StreamSample_GenericCompressed*>(
               &_StreamSample_GenericCompressed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StreamSample_GenericCompressed* other);
  friend void swap(StreamSample_GenericCompressed& a, StreamSample_GenericCompressed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSample_GenericCompressed* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSample_GenericCompressed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSample_GenericCompressed& from);
  void MergeFrom(const StreamSample_GenericCompressed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSample_GenericCompressed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes buff = 2;
  bool has_buff() const;
  void clear_buff();
  static const int kBuffFieldNumber = 2;
  const ::std::string& buff() const;
  void set_buff(const ::std::string& value);
  #if LANG_CXX11
  void set_buff(::std::string&& value);
  #endif
  void set_buff(const char* value);
  void set_buff(const void* value, size_t size);
  ::std::string* mutable_buff();
  ::std::string* release_buff();
  void set_allocated_buff(::std::string* buff);

  // required uint32 size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dqmgui.StreamSample.GenericCompressed)
 private:
  void set_has_size();
  void clear_has_size();
  void set_has_buff();
  void clear_has_buff();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr buff_;
  ::google::protobuf::uint32 size_;
  friend struct ::protobuf_DQM_2fStreamSample_2eproto::TableStruct;
  friend void ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_GenericCompressedImpl();
};
// -------------------------------------------------------------------

class StreamSample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dqmgui.StreamSample) */ {
 public:
  StreamSample();
  virtual ~StreamSample();

  StreamSample(const StreamSample& from);

  inline StreamSample& operator=(const StreamSample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSample(StreamSample&& from) noexcept
    : StreamSample() {
    *this = ::std::move(from);
  }

  inline StreamSample& operator=(StreamSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSample* internal_default_instance() {
    return reinterpret_cast<const StreamSample*>(
               &_StreamSample_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StreamSample* other);
  friend void swap(StreamSample& a, StreamSample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSample* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSample* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSample& from);
  void MergeFrom(const StreamSample& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StreamSample_Header Header;
  typedef StreamSample_MonitorElementInfo MonitorElementInfo;
  typedef StreamSample_MonitorElement MonitorElement;
  typedef StreamSample_MERoot MERoot;
  typedef StreamSample_GenericCompressed GenericCompressed;

  // accessors -------------------------------------------------------

  // repeated .dqmgui.StreamSample.MonitorElement me = 2;
  int me_size() const;
  void clear_me();
  static const int kMeFieldNumber = 2;
  const ::dqmgui::StreamSample_MonitorElement& me(int index) const;
  ::dqmgui::StreamSample_MonitorElement* mutable_me(int index);
  ::dqmgui::StreamSample_MonitorElement* add_me();
  ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElement >*
      mutable_me();
  const ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElement >&
      me() const;

  // repeated .dqmgui.StreamSample.GenericCompressed me_root_c = 3;
  int me_root_c_size() const;
  void clear_me_root_c();
  static const int kMeRootCFieldNumber = 3;
  const ::dqmgui::StreamSample_GenericCompressed& me_root_c(int index) const;
  ::dqmgui::StreamSample_GenericCompressed* mutable_me_root_c(int index);
  ::dqmgui::StreamSample_GenericCompressed* add_me_root_c();
  ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_GenericCompressed >*
      mutable_me_root_c();
  const ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_GenericCompressed >&
      me_root_c() const;

  // required .dqmgui.StreamSample.GenericCompressed header_c = 1;
  bool has_header_c() const;
  void clear_header_c();
  static const int kHeaderCFieldNumber = 1;
  const ::dqmgui::StreamSample_GenericCompressed& header_c() const;
  ::dqmgui::StreamSample_GenericCompressed* release_header_c();
  ::dqmgui::StreamSample_GenericCompressed* mutable_header_c();
  void set_allocated_header_c(::dqmgui::StreamSample_GenericCompressed* header_c);

  // @@protoc_insertion_point(class_scope:dqmgui.StreamSample)
 private:
  void set_has_header_c();
  void clear_has_header_c();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElement > me_;
  ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_GenericCompressed > me_root_c_;
  ::dqmgui::StreamSample_GenericCompressed* header_c_;
  friend struct ::protobuf_DQM_2fStreamSample_2eproto::TableStruct;
  friend void ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSampleImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamSample_Header

// required int32 runNumber = 1;
inline bool StreamSample_Header::has_runnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSample_Header::set_has_runnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSample_Header::clear_has_runnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSample_Header::clear_runnumber() {
  runnumber_ = 0;
  clear_has_runnumber();
}
inline ::google::protobuf::int32 StreamSample_Header::runnumber() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.runNumber)
  return runnumber_;
}
inline void StreamSample_Header::set_runnumber(::google::protobuf::int32 value) {
  set_has_runnumber();
  runnumber_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.runNumber)
}

// required uint32 numObjects = 2;
inline bool StreamSample_Header::has_numobjects() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamSample_Header::set_has_numobjects() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamSample_Header::clear_has_numobjects() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamSample_Header::clear_numobjects() {
  numobjects_ = 0u;
  clear_has_numobjects();
}
inline ::google::protobuf::uint32 StreamSample_Header::numobjects() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.numObjects)
  return numobjects_;
}
inline void StreamSample_Header::set_numobjects(::google::protobuf::uint32 value) {
  set_has_numobjects();
  numobjects_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.numObjects)
}

// required uint64 numEvents = 3;
inline bool StreamSample_Header::has_numevents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamSample_Header::set_has_numevents() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamSample_Header::clear_has_numevents() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamSample_Header::clear_numevents() {
  numevents_ = GOOGLE_ULONGLONG(0);
  clear_has_numevents();
}
inline ::google::protobuf::uint64 StreamSample_Header::numevents() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.numEvents)
  return numevents_;
}
inline void StreamSample_Header::set_numevents(::google::protobuf::uint64 value) {
  set_has_numevents();
  numevents_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.numEvents)
}

// required uint64 numLumiSections = 4;
inline bool StreamSample_Header::has_numlumisections() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamSample_Header::set_has_numlumisections() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamSample_Header::clear_has_numlumisections() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamSample_Header::clear_numlumisections() {
  numlumisections_ = GOOGLE_ULONGLONG(0);
  clear_has_numlumisections();
}
inline ::google::protobuf::uint64 StreamSample_Header::numlumisections() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.numLumiSections)
  return numlumisections_;
}
inline void StreamSample_Header::set_numlumisections(::google::protobuf::uint64 value) {
  set_has_numlumisections();
  numlumisections_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.numLumiSections)
}

// required uint64 runStartTime = 5;
inline bool StreamSample_Header::has_runstarttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StreamSample_Header::set_has_runstarttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StreamSample_Header::clear_has_runstarttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StreamSample_Header::clear_runstarttime() {
  runstarttime_ = GOOGLE_ULONGLONG(0);
  clear_has_runstarttime();
}
inline ::google::protobuf::uint64 StreamSample_Header::runstarttime() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.runStartTime)
  return runstarttime_;
}
inline void StreamSample_Header::set_runstarttime(::google::protobuf::uint64 value) {
  set_has_runstarttime();
  runstarttime_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.runStartTime)
}

// required uint64 processedTime = 6;
inline bool StreamSample_Header::has_processedtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StreamSample_Header::set_has_processedtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StreamSample_Header::clear_has_processedtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StreamSample_Header::clear_processedtime() {
  processedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_processedtime();
}
inline ::google::protobuf::uint64 StreamSample_Header::processedtime() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.processedTime)
  return processedtime_;
}
inline void StreamSample_Header::set_processedtime(::google::protobuf::uint64 value) {
  set_has_processedtime();
  processedtime_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.processedTime)
}

// required bytes streamerInfo = 7;
inline bool StreamSample_Header::has_streamerinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSample_Header::set_has_streamerinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSample_Header::clear_has_streamerinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSample_Header::clear_streamerinfo() {
  streamerinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamerinfo();
}
inline const ::std::string& StreamSample_Header::streamerinfo() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.Header.streamerInfo)
  return streamerinfo_.GetNoArena();
}
inline void StreamSample_Header::set_streamerinfo(const ::std::string& value) {
  set_has_streamerinfo();
  streamerinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.Header.streamerInfo)
}
#if LANG_CXX11
inline void StreamSample_Header::set_streamerinfo(::std::string&& value) {
  set_has_streamerinfo();
  streamerinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dqmgui.StreamSample.Header.streamerInfo)
}
#endif
inline void StreamSample_Header::set_streamerinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_streamerinfo();
  streamerinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dqmgui.StreamSample.Header.streamerInfo)
}
inline void StreamSample_Header::set_streamerinfo(const void* value, size_t size) {
  set_has_streamerinfo();
  streamerinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dqmgui.StreamSample.Header.streamerInfo)
}
inline ::std::string* StreamSample_Header::mutable_streamerinfo() {
  set_has_streamerinfo();
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.Header.streamerInfo)
  return streamerinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamSample_Header::release_streamerinfo() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.Header.streamerInfo)
  clear_has_streamerinfo();
  return streamerinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamSample_Header::set_allocated_streamerinfo(::std::string* streamerinfo) {
  if (streamerinfo != NULL) {
    set_has_streamerinfo();
  } else {
    clear_has_streamerinfo();
  }
  streamerinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamerinfo);
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.Header.streamerInfo)
}

// -------------------------------------------------------------------

// StreamSample_MonitorElementInfo

// required double nbins = 1;
inline bool StreamSample_MonitorElementInfo::has_nbins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSample_MonitorElementInfo::set_has_nbins() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSample_MonitorElementInfo::clear_has_nbins() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSample_MonitorElementInfo::clear_nbins() {
  nbins_ = 0;
  clear_has_nbins();
}
inline double StreamSample_MonitorElementInfo::nbins() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElementInfo.nbins)
  return nbins_;
}
inline void StreamSample_MonitorElementInfo::set_nbins(double value) {
  set_has_nbins();
  nbins_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElementInfo.nbins)
}

// required double mean = 2;
inline bool StreamSample_MonitorElementInfo::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSample_MonitorElementInfo::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSample_MonitorElementInfo::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSample_MonitorElementInfo::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double StreamSample_MonitorElementInfo::mean() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElementInfo.mean)
  return mean_;
}
inline void StreamSample_MonitorElementInfo::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElementInfo.mean)
}

// required double rms = 3;
inline bool StreamSample_MonitorElementInfo::has_rms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamSample_MonitorElementInfo::set_has_rms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamSample_MonitorElementInfo::clear_has_rms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamSample_MonitorElementInfo::clear_rms() {
  rms_ = 0;
  clear_has_rms();
}
inline double StreamSample_MonitorElementInfo::rms() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElementInfo.rms)
  return rms_;
}
inline void StreamSample_MonitorElementInfo::set_rms(double value) {
  set_has_rms();
  rms_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElementInfo.rms)
}

// required double bound_min = 4;
inline bool StreamSample_MonitorElementInfo::has_bound_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamSample_MonitorElementInfo::set_has_bound_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamSample_MonitorElementInfo::clear_has_bound_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamSample_MonitorElementInfo::clear_bound_min() {
  bound_min_ = 0;
  clear_has_bound_min();
}
inline double StreamSample_MonitorElementInfo::bound_min() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElementInfo.bound_min)
  return bound_min_;
}
inline void StreamSample_MonitorElementInfo::set_bound_min(double value) {
  set_has_bound_min();
  bound_min_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElementInfo.bound_min)
}

// required double bound_max = 5;
inline bool StreamSample_MonitorElementInfo::has_bound_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamSample_MonitorElementInfo::set_has_bound_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamSample_MonitorElementInfo::clear_has_bound_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamSample_MonitorElementInfo::clear_bound_max() {
  bound_max_ = 0;
  clear_has_bound_max();
}
inline double StreamSample_MonitorElementInfo::bound_max() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElementInfo.bound_max)
  return bound_max_;
}
inline void StreamSample_MonitorElementInfo::set_bound_max(double value) {
  set_has_bound_max();
  bound_max_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElementInfo.bound_max)
}

// -------------------------------------------------------------------

// StreamSample_MonitorElement

// required string name = 1;
inline bool StreamSample_MonitorElement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSample_MonitorElement::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSample_MonitorElement::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSample_MonitorElement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StreamSample_MonitorElement::name() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.name)
  return name_.GetNoArena();
}
inline void StreamSample_MonitorElement::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.name)
}
#if LANG_CXX11
inline void StreamSample_MonitorElement::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dqmgui.StreamSample.MonitorElement.name)
}
#endif
inline void StreamSample_MonitorElement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dqmgui.StreamSample.MonitorElement.name)
}
inline void StreamSample_MonitorElement::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dqmgui.StreamSample.MonitorElement.name)
}
inline ::std::string* StreamSample_MonitorElement::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.MonitorElement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamSample_MonitorElement::release_name() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.MonitorElement.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamSample_MonitorElement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.MonitorElement.name)
}

// required int32 category = 2;
inline bool StreamSample_MonitorElement::has_category() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamSample_MonitorElement::set_has_category() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamSample_MonitorElement::clear_has_category() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamSample_MonitorElement::clear_category() {
  category_ = 0;
  clear_has_category();
}
inline ::google::protobuf::int32 StreamSample_MonitorElement::category() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.category)
  return category_;
}
inline void StreamSample_MonitorElement::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.category)
}

// required int32 lumibegin = 3;
inline bool StreamSample_MonitorElement::has_lumibegin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamSample_MonitorElement::set_has_lumibegin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamSample_MonitorElement::clear_has_lumibegin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamSample_MonitorElement::clear_lumibegin() {
  lumibegin_ = 0;
  clear_has_lumibegin();
}
inline ::google::protobuf::int32 StreamSample_MonitorElement::lumibegin() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.lumibegin)
  return lumibegin_;
}
inline void StreamSample_MonitorElement::set_lumibegin(::google::protobuf::int32 value) {
  set_has_lumibegin();
  lumibegin_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.lumibegin)
}

// required uint32 properties = 4;
inline bool StreamSample_MonitorElement::has_properties() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StreamSample_MonitorElement::set_has_properties() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StreamSample_MonitorElement::clear_has_properties() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StreamSample_MonitorElement::clear_properties() {
  properties_ = 0u;
  clear_has_properties();
}
inline ::google::protobuf::uint32 StreamSample_MonitorElement::properties() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.properties)
  return properties_;
}
inline void StreamSample_MonitorElement::set_properties(::google::protobuf::uint32 value) {
  set_has_properties();
  properties_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.properties)
}

// required uint32 dataLength = 5;
inline bool StreamSample_MonitorElement::has_datalength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StreamSample_MonitorElement::set_has_datalength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StreamSample_MonitorElement::clear_has_datalength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StreamSample_MonitorElement::clear_datalength() {
  datalength_ = 0u;
  clear_has_datalength();
}
inline ::google::protobuf::uint32 StreamSample_MonitorElement::datalength() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.dataLength)
  return datalength_;
}
inline void StreamSample_MonitorElement::set_datalength(::google::protobuf::uint32 value) {
  set_has_datalength();
  datalength_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.dataLength)
}

// required uint32 qtestLength = 6;
inline bool StreamSample_MonitorElement::has_qtestlength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StreamSample_MonitorElement::set_has_qtestlength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StreamSample_MonitorElement::clear_has_qtestlength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StreamSample_MonitorElement::clear_qtestlength() {
  qtestlength_ = 0u;
  clear_has_qtestlength();
}
inline ::google::protobuf::uint32 StreamSample_MonitorElement::qtestlength() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.qtestLength)
  return qtestlength_;
}
inline void StreamSample_MonitorElement::set_qtestlength(::google::protobuf::uint32 value) {
  set_has_qtestlength();
  qtestlength_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.qtestLength)
}

// required uint32 objectLength = 7;
inline bool StreamSample_MonitorElement::has_objectlength() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StreamSample_MonitorElement::set_has_objectlength() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StreamSample_MonitorElement::clear_has_objectlength() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StreamSample_MonitorElement::clear_objectlength() {
  objectlength_ = 0u;
  clear_has_objectlength();
}
inline ::google::protobuf::uint32 StreamSample_MonitorElement::objectlength() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.objectLength)
  return objectlength_;
}
inline void StreamSample_MonitorElement::set_objectlength(::google::protobuf::uint32 value) {
  set_has_objectlength();
  objectlength_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.objectLength)
}

// required uint32 tag = 8;
inline bool StreamSample_MonitorElement::has_tag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StreamSample_MonitorElement::set_has_tag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StreamSample_MonitorElement::clear_has_tag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StreamSample_MonitorElement::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 StreamSample_MonitorElement::tag() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.tag)
  return tag_;
}
inline void StreamSample_MonitorElement::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.tag)
}

// required double entries = 9;
inline bool StreamSample_MonitorElement::has_entries() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StreamSample_MonitorElement::set_has_entries() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StreamSample_MonitorElement::clear_has_entries() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StreamSample_MonitorElement::clear_entries() {
  entries_ = 0;
  clear_has_entries();
}
inline double StreamSample_MonitorElement::entries() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.entries)
  return entries_;
}
inline void StreamSample_MonitorElement::set_entries(double value) {
  set_has_entries();
  entries_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.entries)
}

// repeated .dqmgui.StreamSample.MonitorElementInfo info = 10;
inline int StreamSample_MonitorElement::info_size() const {
  return info_.size();
}
inline void StreamSample_MonitorElement::clear_info() {
  info_.Clear();
}
inline const ::dqmgui::StreamSample_MonitorElementInfo& StreamSample_MonitorElement::info(int index) const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.info)
  return info_.Get(index);
}
inline ::dqmgui::StreamSample_MonitorElementInfo* StreamSample_MonitorElement::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.MonitorElement.info)
  return info_.Mutable(index);
}
inline ::dqmgui::StreamSample_MonitorElementInfo* StreamSample_MonitorElement::add_info() {
  // @@protoc_insertion_point(field_add:dqmgui.StreamSample.MonitorElement.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElementInfo >*
StreamSample_MonitorElement::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:dqmgui.StreamSample.MonitorElement.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElementInfo >&
StreamSample_MonitorElement::info() const {
  // @@protoc_insertion_point(field_list:dqmgui.StreamSample.MonitorElement.info)
  return info_;
}

// optional bytes data = 11;
inline bool StreamSample_MonitorElement::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSample_MonitorElement::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSample_MonitorElement::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSample_MonitorElement::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& StreamSample_MonitorElement::data() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.data)
  return data_.GetNoArena();
}
inline void StreamSample_MonitorElement::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.data)
}
#if LANG_CXX11
inline void StreamSample_MonitorElement::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dqmgui.StreamSample.MonitorElement.data)
}
#endif
inline void StreamSample_MonitorElement::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dqmgui.StreamSample.MonitorElement.data)
}
inline void StreamSample_MonitorElement::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dqmgui.StreamSample.MonitorElement.data)
}
inline ::std::string* StreamSample_MonitorElement::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.MonitorElement.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamSample_MonitorElement::release_data() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.MonitorElement.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamSample_MonitorElement::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.MonitorElement.data)
}

// optional bytes qt = 12;
inline bool StreamSample_MonitorElement::has_qt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamSample_MonitorElement::set_has_qt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamSample_MonitorElement::clear_has_qt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamSample_MonitorElement::clear_qt() {
  qt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qt();
}
inline const ::std::string& StreamSample_MonitorElement::qt() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MonitorElement.qt)
  return qt_.GetNoArena();
}
inline void StreamSample_MonitorElement::set_qt(const ::std::string& value) {
  set_has_qt();
  qt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MonitorElement.qt)
}
#if LANG_CXX11
inline void StreamSample_MonitorElement::set_qt(::std::string&& value) {
  set_has_qt();
  qt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dqmgui.StreamSample.MonitorElement.qt)
}
#endif
inline void StreamSample_MonitorElement::set_qt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qt();
  qt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dqmgui.StreamSample.MonitorElement.qt)
}
inline void StreamSample_MonitorElement::set_qt(const void* value, size_t size) {
  set_has_qt();
  qt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dqmgui.StreamSample.MonitorElement.qt)
}
inline ::std::string* StreamSample_MonitorElement::mutable_qt() {
  set_has_qt();
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.MonitorElement.qt)
  return qt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamSample_MonitorElement::release_qt() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.MonitorElement.qt)
  clear_has_qt();
  return qt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamSample_MonitorElement::set_allocated_qt(::std::string* qt) {
  if (qt != NULL) {
    set_has_qt();
  } else {
    clear_has_qt();
  }
  qt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qt);
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.MonitorElement.qt)
}

// -------------------------------------------------------------------

// StreamSample_MERoot

// required bytes rawdata = 1;
inline bool StreamSample_MERoot::has_rawdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSample_MERoot::set_has_rawdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSample_MERoot::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSample_MERoot::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawdata();
}
inline const ::std::string& StreamSample_MERoot::rawdata() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.MERoot.rawdata)
  return rawdata_.GetNoArena();
}
inline void StreamSample_MERoot::set_rawdata(const ::std::string& value) {
  set_has_rawdata();
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.MERoot.rawdata)
}
#if LANG_CXX11
inline void StreamSample_MERoot::set_rawdata(::std::string&& value) {
  set_has_rawdata();
  rawdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dqmgui.StreamSample.MERoot.rawdata)
}
#endif
inline void StreamSample_MERoot::set_rawdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawdata();
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dqmgui.StreamSample.MERoot.rawdata)
}
inline void StreamSample_MERoot::set_rawdata(const void* value, size_t size) {
  set_has_rawdata();
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dqmgui.StreamSample.MERoot.rawdata)
}
inline ::std::string* StreamSample_MERoot::mutable_rawdata() {
  set_has_rawdata();
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.MERoot.rawdata)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamSample_MERoot::release_rawdata() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.MERoot.rawdata)
  clear_has_rawdata();
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamSample_MERoot::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    set_has_rawdata();
  } else {
    clear_has_rawdata();
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.MERoot.rawdata)
}

// -------------------------------------------------------------------

// StreamSample_GenericCompressed

// required uint32 size = 1;
inline bool StreamSample_GenericCompressed::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSample_GenericCompressed::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSample_GenericCompressed::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSample_GenericCompressed::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 StreamSample_GenericCompressed::size() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.GenericCompressed.size)
  return size_;
}
inline void StreamSample_GenericCompressed::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.GenericCompressed.size)
}

// required bytes buff = 2;
inline bool StreamSample_GenericCompressed::has_buff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSample_GenericCompressed::set_has_buff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSample_GenericCompressed::clear_has_buff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSample_GenericCompressed::clear_buff() {
  buff_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buff();
}
inline const ::std::string& StreamSample_GenericCompressed::buff() const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.GenericCompressed.buff)
  return buff_.GetNoArena();
}
inline void StreamSample_GenericCompressed::set_buff(const ::std::string& value) {
  set_has_buff();
  buff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dqmgui.StreamSample.GenericCompressed.buff)
}
#if LANG_CXX11
inline void StreamSample_GenericCompressed::set_buff(::std::string&& value) {
  set_has_buff();
  buff_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dqmgui.StreamSample.GenericCompressed.buff)
}
#endif
inline void StreamSample_GenericCompressed::set_buff(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buff();
  buff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dqmgui.StreamSample.GenericCompressed.buff)
}
inline void StreamSample_GenericCompressed::set_buff(const void* value, size_t size) {
  set_has_buff();
  buff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dqmgui.StreamSample.GenericCompressed.buff)
}
inline ::std::string* StreamSample_GenericCompressed::mutable_buff() {
  set_has_buff();
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.GenericCompressed.buff)
  return buff_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamSample_GenericCompressed::release_buff() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.GenericCompressed.buff)
  clear_has_buff();
  return buff_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamSample_GenericCompressed::set_allocated_buff(::std::string* buff) {
  if (buff != NULL) {
    set_has_buff();
  } else {
    clear_has_buff();
  }
  buff_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buff);
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.GenericCompressed.buff)
}

// -------------------------------------------------------------------

// StreamSample

// required .dqmgui.StreamSample.GenericCompressed header_c = 1;
inline bool StreamSample::has_header_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSample::set_has_header_c() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSample::clear_has_header_c() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSample::clear_header_c() {
  if (header_c_ != NULL) header_c_->Clear();
  clear_has_header_c();
}
inline const ::dqmgui::StreamSample_GenericCompressed& StreamSample::header_c() const {
  const ::dqmgui::StreamSample_GenericCompressed* p = header_c_;
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.header_c)
  return p != NULL ? *p : *reinterpret_cast<const ::dqmgui::StreamSample_GenericCompressed*>(
      &::dqmgui::_StreamSample_GenericCompressed_default_instance_);
}
inline ::dqmgui::StreamSample_GenericCompressed* StreamSample::release_header_c() {
  // @@protoc_insertion_point(field_release:dqmgui.StreamSample.header_c)
  clear_has_header_c();
  ::dqmgui::StreamSample_GenericCompressed* temp = header_c_;
  header_c_ = NULL;
  return temp;
}
inline ::dqmgui::StreamSample_GenericCompressed* StreamSample::mutable_header_c() {
  set_has_header_c();
  if (header_c_ == NULL) {
    header_c_ = new ::dqmgui::StreamSample_GenericCompressed;
  }
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.header_c)
  return header_c_;
}
inline void StreamSample::set_allocated_header_c(::dqmgui::StreamSample_GenericCompressed* header_c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_c_;
  }
  if (header_c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header_c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header_c, submessage_arena);
    }
    set_has_header_c();
  } else {
    clear_has_header_c();
  }
  header_c_ = header_c;
  // @@protoc_insertion_point(field_set_allocated:dqmgui.StreamSample.header_c)
}

// repeated .dqmgui.StreamSample.MonitorElement me = 2;
inline int StreamSample::me_size() const {
  return me_.size();
}
inline void StreamSample::clear_me() {
  me_.Clear();
}
inline const ::dqmgui::StreamSample_MonitorElement& StreamSample::me(int index) const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.me)
  return me_.Get(index);
}
inline ::dqmgui::StreamSample_MonitorElement* StreamSample::mutable_me(int index) {
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.me)
  return me_.Mutable(index);
}
inline ::dqmgui::StreamSample_MonitorElement* StreamSample::add_me() {
  // @@protoc_insertion_point(field_add:dqmgui.StreamSample.me)
  return me_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElement >*
StreamSample::mutable_me() {
  // @@protoc_insertion_point(field_mutable_list:dqmgui.StreamSample.me)
  return &me_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_MonitorElement >&
StreamSample::me() const {
  // @@protoc_insertion_point(field_list:dqmgui.StreamSample.me)
  return me_;
}

// repeated .dqmgui.StreamSample.GenericCompressed me_root_c = 3;
inline int StreamSample::me_root_c_size() const {
  return me_root_c_.size();
}
inline void StreamSample::clear_me_root_c() {
  me_root_c_.Clear();
}
inline const ::dqmgui::StreamSample_GenericCompressed& StreamSample::me_root_c(int index) const {
  // @@protoc_insertion_point(field_get:dqmgui.StreamSample.me_root_c)
  return me_root_c_.Get(index);
}
inline ::dqmgui::StreamSample_GenericCompressed* StreamSample::mutable_me_root_c(int index) {
  // @@protoc_insertion_point(field_mutable:dqmgui.StreamSample.me_root_c)
  return me_root_c_.Mutable(index);
}
inline ::dqmgui::StreamSample_GenericCompressed* StreamSample::add_me_root_c() {
  // @@protoc_insertion_point(field_add:dqmgui.StreamSample.me_root_c)
  return me_root_c_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_GenericCompressed >*
StreamSample::mutable_me_root_c() {
  // @@protoc_insertion_point(field_mutable_list:dqmgui.StreamSample.me_root_c)
  return &me_root_c_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dqmgui::StreamSample_GenericCompressed >&
StreamSample::me_root_c() const {
  // @@protoc_insertion_point(field_list:dqmgui.StreamSample.me_root_c)
  return me_root_c_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dqmgui

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DQM_2fStreamSample_2eproto__INCLUDED
