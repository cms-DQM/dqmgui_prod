// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DQM/StreamSample.proto

#include "DQM/StreamSample.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace dqmgui {
class StreamSample_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSample_Header>
      _instance;
} _StreamSample_Header_default_instance_;
class StreamSample_MonitorElementInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSample_MonitorElementInfo>
      _instance;
} _StreamSample_MonitorElementInfo_default_instance_;
class StreamSample_MonitorElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSample_MonitorElement>
      _instance;
} _StreamSample_MonitorElement_default_instance_;
class StreamSample_MERootDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSample_MERoot>
      _instance;
} _StreamSample_MERoot_default_instance_;
class StreamSample_GenericCompressedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSample_GenericCompressed>
      _instance;
} _StreamSample_GenericCompressed_default_instance_;
class StreamSampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSample>
      _instance;
} _StreamSample_default_instance_;
}  // namespace dqmgui
namespace protobuf_DQM_2fStreamSample_2eproto {
void InitDefaultsStreamSample_HeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dqmgui::_StreamSample_Header_default_instance_;
    new (ptr) ::dqmgui::StreamSample_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dqmgui::StreamSample_Header::InitAsDefaultInstance();
}

void InitDefaultsStreamSample_Header() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamSample_HeaderImpl);
}

void InitDefaultsStreamSample_MonitorElementInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dqmgui::_StreamSample_MonitorElementInfo_default_instance_;
    new (ptr) ::dqmgui::StreamSample_MonitorElementInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dqmgui::StreamSample_MonitorElementInfo::InitAsDefaultInstance();
}

void InitDefaultsStreamSample_MonitorElementInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamSample_MonitorElementInfoImpl);
}

void InitDefaultsStreamSample_MonitorElementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElementInfo();
  {
    void* ptr = &::dqmgui::_StreamSample_MonitorElement_default_instance_;
    new (ptr) ::dqmgui::StreamSample_MonitorElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dqmgui::StreamSample_MonitorElement::InitAsDefaultInstance();
}

void InitDefaultsStreamSample_MonitorElement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamSample_MonitorElementImpl);
}

void InitDefaultsStreamSample_MERootImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dqmgui::_StreamSample_MERoot_default_instance_;
    new (ptr) ::dqmgui::StreamSample_MERoot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dqmgui::StreamSample_MERoot::InitAsDefaultInstance();
}

void InitDefaultsStreamSample_MERoot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamSample_MERootImpl);
}

void InitDefaultsStreamSample_GenericCompressedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dqmgui::_StreamSample_GenericCompressed_default_instance_;
    new (ptr) ::dqmgui::StreamSample_GenericCompressed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dqmgui::StreamSample_GenericCompressed::InitAsDefaultInstance();
}

void InitDefaultsStreamSample_GenericCompressed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamSample_GenericCompressedImpl);
}

void InitDefaultsStreamSampleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_GenericCompressed();
  protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElement();
  {
    void* ptr = &::dqmgui::_StreamSample_default_instance_;
    new (ptr) ::dqmgui::StreamSample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dqmgui::StreamSample::InitAsDefaultInstance();
}

void InitDefaultsStreamSample() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamSampleImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, runnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, numobjects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, numevents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, numlumisections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, runstarttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, processedtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_Header, streamerinfo_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, nbins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, bound_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElementInfo, bound_max_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, lumibegin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, datalength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, qtestlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, objectlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MonitorElement, qt_),
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MERoot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MERoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_MERoot, rawdata_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_GenericCompressed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_GenericCompressed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_GenericCompressed, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample_GenericCompressed, buff_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample, header_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample, me_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dqmgui::StreamSample, me_root_c_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::dqmgui::StreamSample_Header)},
  { 19, 29, sizeof(::dqmgui::StreamSample_MonitorElementInfo)},
  { 34, 51, sizeof(::dqmgui::StreamSample_MonitorElement)},
  { 63, 69, sizeof(::dqmgui::StreamSample_MERoot)},
  { 70, 77, sizeof(::dqmgui::StreamSample_GenericCompressed)},
  { 79, 87, sizeof(::dqmgui::StreamSample)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dqmgui::_StreamSample_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dqmgui::_StreamSample_MonitorElementInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dqmgui::_StreamSample_MonitorElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dqmgui::_StreamSample_MERoot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dqmgui::_StreamSample_GenericCompressed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dqmgui::_StreamSample_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DQM/StreamSample.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026DQM/StreamSample.proto\022\006dqmgui\"\217\006\n\014Str"
      "eamSample\0228\n\010header_c\030\001 \002(\0132&.dqmgui.Str"
      "eamSample.GenericCompressed\022/\n\002me\030\002 \003(\0132"
      "#.dqmgui.StreamSample.MonitorElement\0229\n\t"
      "me_root_c\030\003 \003(\0132&.dqmgui.StreamSample.Ge"
      "nericCompressed\032\236\001\n\006Header\022\021\n\trunNumber\030"
      "\001 \002(\005\022\022\n\nnumObjects\030\002 \002(\r\022\021\n\tnumEvents\030\003"
      " \002(\004\022\027\n\017numLumiSections\030\004 \002(\004\022\024\n\014runStar"
      "tTime\030\005 \002(\004\022\025\n\rprocessedTime\030\006 \002(\004\022\024\n\014st"
      "reamerInfo\030\007 \002(\014\032d\n\022MonitorElementInfo\022\r"
      "\n\005nbins\030\001 \002(\001\022\014\n\004mean\030\002 \002(\001\022\013\n\003rms\030\003 \002(\001"
      "\022\021\n\tbound_min\030\004 \002(\001\022\021\n\tbound_max\030\005 \002(\001\032\205"
      "\002\n\016MonitorElement\022\014\n\004name\030\001 \002(\t\022\020\n\010categ"
      "ory\030\002 \002(\005\022\021\n\tlumibegin\030\003 \002(\005\022\022\n\nproperti"
      "es\030\004 \002(\r\022\022\n\ndataLength\030\005 \002(\r\022\023\n\013qtestLen"
      "gth\030\006 \002(\r\022\024\n\014objectLength\030\007 \002(\r\022\013\n\003tag\030\010"
      " \002(\r\022\017\n\007entries\030\t \002(\001\0225\n\004info\030\n \003(\0132\'.dq"
      "mgui.StreamSample.MonitorElementInfo\022\014\n\004"
      "data\030\013 \001(\014\022\n\n\002qt\030\014 \001(\014\032\031\n\006MERoot\022\017\n\007rawd"
      "ata\030\001 \002(\014\032/\n\021GenericCompressed\022\014\n\004size\030\001"
      " \002(\r\022\014\n\004buff\030\002 \002(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 818);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DQM/StreamSample.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_DQM_2fStreamSample_2eproto
namespace dqmgui {

// ===================================================================

void StreamSample_Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSample_Header::kRunNumberFieldNumber;
const int StreamSample_Header::kNumObjectsFieldNumber;
const int StreamSample_Header::kNumEventsFieldNumber;
const int StreamSample_Header::kNumLumiSectionsFieldNumber;
const int StreamSample_Header::kRunStartTimeFieldNumber;
const int StreamSample_Header::kProcessedTimeFieldNumber;
const int StreamSample_Header::kStreamerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSample_Header::StreamSample_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_Header();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dqmgui.StreamSample.Header)
}
StreamSample_Header::StreamSample_Header(const StreamSample_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamerinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_streamerinfo()) {
    streamerinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamerinfo_);
  }
  ::memcpy(&runnumber_, &from.runnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&processedtime_) -
    reinterpret_cast<char*>(&runnumber_)) + sizeof(processedtime_));
  // @@protoc_insertion_point(copy_constructor:dqmgui.StreamSample.Header)
}

void StreamSample_Header::SharedCtor() {
  _cached_size_ = 0;
  streamerinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&runnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processedtime_) -
      reinterpret_cast<char*>(&runnumber_)) + sizeof(processedtime_));
}

StreamSample_Header::~StreamSample_Header() {
  // @@protoc_insertion_point(destructor:dqmgui.StreamSample.Header)
  SharedDtor();
}

void StreamSample_Header::SharedDtor() {
  streamerinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamSample_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSample_Header::descriptor() {
  ::protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSample_Header& StreamSample_Header::default_instance() {
  ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_Header();
  return *internal_default_instance();
}

StreamSample_Header* StreamSample_Header::New(::google::protobuf::Arena* arena) const {
  StreamSample_Header* n = new StreamSample_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSample_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:dqmgui.StreamSample.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!streamerinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*streamerinfo_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&runnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&processedtime_) -
        reinterpret_cast<char*>(&runnumber_)) + sizeof(processedtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSample_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dqmgui.StreamSample.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 runNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_runnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numObjects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_numobjects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numobjects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 numEvents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_numevents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numevents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 numLumiSections = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_numlumisections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numlumisections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 runStartTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_runstarttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &runstarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 processedTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_processedtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &processedtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes streamerInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dqmgui.StreamSample.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dqmgui.StreamSample.Header)
  return false;
#undef DO_
}

void StreamSample_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dqmgui.StreamSample.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 runNumber = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->runnumber(), output);
  }

  // required uint32 numObjects = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numobjects(), output);
  }

  // required uint64 numEvents = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->numevents(), output);
  }

  // required uint64 numLumiSections = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->numlumisections(), output);
  }

  // required uint64 runStartTime = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->runstarttime(), output);
  }

  // required uint64 processedTime = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->processedtime(), output);
  }

  // required bytes streamerInfo = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->streamerinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dqmgui.StreamSample.Header)
}

::google::protobuf::uint8* StreamSample_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dqmgui.StreamSample.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 runNumber = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->runnumber(), target);
  }

  // required uint32 numObjects = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numobjects(), target);
  }

  // required uint64 numEvents = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->numevents(), target);
  }

  // required uint64 numLumiSections = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->numlumisections(), target);
  }

  // required uint64 runStartTime = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->runstarttime(), target);
  }

  // required uint64 processedTime = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->processedtime(), target);
  }

  // required bytes streamerInfo = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->streamerinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dqmgui.StreamSample.Header)
  return target;
}

size_t StreamSample_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dqmgui.StreamSample.Header)
  size_t total_size = 0;

  if (has_streamerinfo()) {
    // required bytes streamerInfo = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->streamerinfo());
  }

  if (has_runnumber()) {
    // required int32 runNumber = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->runnumber());
  }

  if (has_numobjects()) {
    // required uint32 numObjects = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numobjects());
  }

  if (has_numevents()) {
    // required uint64 numEvents = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->numevents());
  }

  if (has_numlumisections()) {
    // required uint64 numLumiSections = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->numlumisections());
  }

  if (has_runstarttime()) {
    // required uint64 runStartTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->runstarttime());
  }

  if (has_processedtime()) {
    // required uint64 processedTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->processedtime());
  }

  return total_size;
}
size_t StreamSample_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dqmgui.StreamSample.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes streamerInfo = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->streamerinfo());

    // required int32 runNumber = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->runnumber());

    // required uint32 numObjects = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numobjects());

    // required uint64 numEvents = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->numevents());

    // required uint64 numLumiSections = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->numlumisections());

    // required uint64 runStartTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->runstarttime());

    // required uint64 processedTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->processedtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSample_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dqmgui.StreamSample.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSample_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSample_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dqmgui.StreamSample.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dqmgui.StreamSample.Header)
    MergeFrom(*source);
  }
}

void StreamSample_Header::MergeFrom(const StreamSample_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dqmgui.StreamSample.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_streamerinfo();
      streamerinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamerinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      runnumber_ = from.runnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      numobjects_ = from.numobjects_;
    }
    if (cached_has_bits & 0x00000008u) {
      numevents_ = from.numevents_;
    }
    if (cached_has_bits & 0x00000010u) {
      numlumisections_ = from.numlumisections_;
    }
    if (cached_has_bits & 0x00000020u) {
      runstarttime_ = from.runstarttime_;
    }
    if (cached_has_bits & 0x00000040u) {
      processedtime_ = from.processedtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamSample_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dqmgui.StreamSample.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSample_Header::CopyFrom(const StreamSample_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dqmgui.StreamSample.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSample_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void StreamSample_Header::Swap(StreamSample_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSample_Header::InternalSwap(StreamSample_Header* other) {
  using std::swap;
  streamerinfo_.Swap(&other->streamerinfo_);
  swap(runnumber_, other->runnumber_);
  swap(numobjects_, other->numobjects_);
  swap(numevents_, other->numevents_);
  swap(numlumisections_, other->numlumisections_);
  swap(runstarttime_, other->runstarttime_);
  swap(processedtime_, other->processedtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSample_Header::GetMetadata() const {
  protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamSample_MonitorElementInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSample_MonitorElementInfo::kNbinsFieldNumber;
const int StreamSample_MonitorElementInfo::kMeanFieldNumber;
const int StreamSample_MonitorElementInfo::kRmsFieldNumber;
const int StreamSample_MonitorElementInfo::kBoundMinFieldNumber;
const int StreamSample_MonitorElementInfo::kBoundMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSample_MonitorElementInfo::StreamSample_MonitorElementInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElementInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dqmgui.StreamSample.MonitorElementInfo)
}
StreamSample_MonitorElementInfo::StreamSample_MonitorElementInfo(const StreamSample_MonitorElementInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nbins_, &from.nbins_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_max_) -
    reinterpret_cast<char*>(&nbins_)) + sizeof(bound_max_));
  // @@protoc_insertion_point(copy_constructor:dqmgui.StreamSample.MonitorElementInfo)
}

void StreamSample_MonitorElementInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nbins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_max_) -
      reinterpret_cast<char*>(&nbins_)) + sizeof(bound_max_));
}

StreamSample_MonitorElementInfo::~StreamSample_MonitorElementInfo() {
  // @@protoc_insertion_point(destructor:dqmgui.StreamSample.MonitorElementInfo)
  SharedDtor();
}

void StreamSample_MonitorElementInfo::SharedDtor() {
}

void StreamSample_MonitorElementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSample_MonitorElementInfo::descriptor() {
  ::protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSample_MonitorElementInfo& StreamSample_MonitorElementInfo::default_instance() {
  ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElementInfo();
  return *internal_default_instance();
}

StreamSample_MonitorElementInfo* StreamSample_MonitorElementInfo::New(::google::protobuf::Arena* arena) const {
  StreamSample_MonitorElementInfo* n = new StreamSample_MonitorElementInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSample_MonitorElementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dqmgui.StreamSample.MonitorElementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&nbins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bound_max_) -
        reinterpret_cast<char*>(&nbins_)) + sizeof(bound_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSample_MonitorElementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dqmgui.StreamSample.MonitorElementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double nbins = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_nbins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nbins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double rms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bound_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_bound_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bound_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bound_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_bound_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bound_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dqmgui.StreamSample.MonitorElementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dqmgui.StreamSample.MonitorElementInfo)
  return false;
#undef DO_
}

void StreamSample_MonitorElementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dqmgui.StreamSample.MonitorElementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double nbins = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->nbins(), output);
  }

  // required double mean = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mean(), output);
  }

  // required double rms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rms(), output);
  }

  // required double bound_min = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bound_min(), output);
  }

  // required double bound_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bound_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dqmgui.StreamSample.MonitorElementInfo)
}

::google::protobuf::uint8* StreamSample_MonitorElementInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dqmgui.StreamSample.MonitorElementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double nbins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->nbins(), target);
  }

  // required double mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mean(), target);
  }

  // required double rms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rms(), target);
  }

  // required double bound_min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bound_min(), target);
  }

  // required double bound_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bound_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dqmgui.StreamSample.MonitorElementInfo)
  return target;
}

size_t StreamSample_MonitorElementInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dqmgui.StreamSample.MonitorElementInfo)
  size_t total_size = 0;

  if (has_nbins()) {
    // required double nbins = 1;
    total_size += 1 + 8;
  }

  if (has_mean()) {
    // required double mean = 2;
    total_size += 1 + 8;
  }

  if (has_rms()) {
    // required double rms = 3;
    total_size += 1 + 8;
  }

  if (has_bound_min()) {
    // required double bound_min = 4;
    total_size += 1 + 8;
  }

  if (has_bound_max()) {
    // required double bound_max = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t StreamSample_MonitorElementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dqmgui.StreamSample.MonitorElementInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double nbins = 1;
    total_size += 1 + 8;

    // required double mean = 2;
    total_size += 1 + 8;

    // required double rms = 3;
    total_size += 1 + 8;

    // required double bound_min = 4;
    total_size += 1 + 8;

    // required double bound_max = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSample_MonitorElementInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dqmgui.StreamSample.MonitorElementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSample_MonitorElementInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSample_MonitorElementInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dqmgui.StreamSample.MonitorElementInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dqmgui.StreamSample.MonitorElementInfo)
    MergeFrom(*source);
  }
}

void StreamSample_MonitorElementInfo::MergeFrom(const StreamSample_MonitorElementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dqmgui.StreamSample.MonitorElementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      nbins_ = from.nbins_;
    }
    if (cached_has_bits & 0x00000002u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      rms_ = from.rms_;
    }
    if (cached_has_bits & 0x00000008u) {
      bound_min_ = from.bound_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      bound_max_ = from.bound_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamSample_MonitorElementInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dqmgui.StreamSample.MonitorElementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSample_MonitorElementInfo::CopyFrom(const StreamSample_MonitorElementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dqmgui.StreamSample.MonitorElementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSample_MonitorElementInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void StreamSample_MonitorElementInfo::Swap(StreamSample_MonitorElementInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSample_MonitorElementInfo::InternalSwap(StreamSample_MonitorElementInfo* other) {
  using std::swap;
  swap(nbins_, other->nbins_);
  swap(mean_, other->mean_);
  swap(rms_, other->rms_);
  swap(bound_min_, other->bound_min_);
  swap(bound_max_, other->bound_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSample_MonitorElementInfo::GetMetadata() const {
  protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamSample_MonitorElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSample_MonitorElement::kNameFieldNumber;
const int StreamSample_MonitorElement::kCategoryFieldNumber;
const int StreamSample_MonitorElement::kLumibeginFieldNumber;
const int StreamSample_MonitorElement::kPropertiesFieldNumber;
const int StreamSample_MonitorElement::kDataLengthFieldNumber;
const int StreamSample_MonitorElement::kQtestLengthFieldNumber;
const int StreamSample_MonitorElement::kObjectLengthFieldNumber;
const int StreamSample_MonitorElement::kTagFieldNumber;
const int StreamSample_MonitorElement::kEntriesFieldNumber;
const int StreamSample_MonitorElement::kInfoFieldNumber;
const int StreamSample_MonitorElement::kDataFieldNumber;
const int StreamSample_MonitorElement::kQtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSample_MonitorElement::StreamSample_MonitorElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dqmgui.StreamSample.MonitorElement)
}
StreamSample_MonitorElement::StreamSample_MonitorElement(const StreamSample_MonitorElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  qt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qt()) {
    qt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qt_);
  }
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&category_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:dqmgui.StreamSample.MonitorElement)
}

void StreamSample_MonitorElement::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&category_)) + sizeof(tag_));
}

StreamSample_MonitorElement::~StreamSample_MonitorElement() {
  // @@protoc_insertion_point(destructor:dqmgui.StreamSample.MonitorElement)
  SharedDtor();
}

void StreamSample_MonitorElement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamSample_MonitorElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSample_MonitorElement::descriptor() {
  ::protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSample_MonitorElement& StreamSample_MonitorElement::default_instance() {
  ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MonitorElement();
  return *internal_default_instance();
}

StreamSample_MonitorElement* StreamSample_MonitorElement::New(::google::protobuf::Arena* arena) const {
  StreamSample_MonitorElement* n = new StreamSample_MonitorElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSample_MonitorElement::Clear() {
// @@protoc_insertion_point(message_clear_start:dqmgui.StreamSample.MonitorElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!qt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qt_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qtestlength_) -
        reinterpret_cast<char*>(&category_)) + sizeof(qtestlength_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&objectlength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_) -
        reinterpret_cast<char*>(&objectlength_)) + sizeof(tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSample_MonitorElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dqmgui.StreamSample.MonitorElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dqmgui.StreamSample.MonitorElement.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lumibegin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lumibegin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lumibegin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_properties();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &properties_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 dataLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_datalength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datalength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qtestLength = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_qtestlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qtestlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 objectLength = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_objectlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 tag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double entries = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dqmgui.StreamSample.MonitorElementInfo info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes qt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dqmgui.StreamSample.MonitorElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dqmgui.StreamSample.MonitorElement)
  return false;
#undef DO_
}

void StreamSample_MonitorElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dqmgui.StreamSample.MonitorElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dqmgui.StreamSample.MonitorElement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 category = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category(), output);
  }

  // required int32 lumibegin = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lumibegin(), output);
  }

  // required uint32 properties = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->properties(), output);
  }

  // required uint32 dataLength = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datalength(), output);
  }

  // required uint32 qtestLength = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->qtestlength(), output);
  }

  // required uint32 objectLength = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->objectlength(), output);
  }

  // required uint32 tag = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tag(), output);
  }

  // required double entries = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->entries(), output);
  }

  // repeated .dqmgui.StreamSample.MonitorElementInfo info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->info(static_cast<int>(i)), output);
  }

  // optional bytes data = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->data(), output);
  }

  // optional bytes qt = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->qt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dqmgui.StreamSample.MonitorElement)
}

::google::protobuf::uint8* StreamSample_MonitorElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dqmgui.StreamSample.MonitorElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dqmgui.StreamSample.MonitorElement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 category = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category(), target);
  }

  // required int32 lumibegin = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lumibegin(), target);
  }

  // required uint32 properties = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->properties(), target);
  }

  // required uint32 dataLength = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datalength(), target);
  }

  // required uint32 qtestLength = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->qtestlength(), target);
  }

  // required uint32 objectLength = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->objectlength(), target);
  }

  // required uint32 tag = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tag(), target);
  }

  // required double entries = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->entries(), target);
  }

  // repeated .dqmgui.StreamSample.MonitorElementInfo info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->info(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes data = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->data(), target);
  }

  // optional bytes qt = 12;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->qt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dqmgui.StreamSample.MonitorElement)
  return target;
}

size_t StreamSample_MonitorElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dqmgui.StreamSample.MonitorElement)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_category()) {
    // required int32 category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category());
  }

  if (has_lumibegin()) {
    // required int32 lumibegin = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lumibegin());
  }

  if (has_properties()) {
    // required uint32 properties = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->properties());
  }

  if (has_datalength()) {
    // required uint32 dataLength = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalength());
  }

  if (has_qtestlength()) {
    // required uint32 qtestLength = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qtestlength());
  }

  if (has_objectlength()) {
    // required uint32 objectLength = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectlength());
  }

  if (has_entries()) {
    // required double entries = 9;
    total_size += 1 + 8;
  }

  if (has_tag()) {
    // required uint32 tag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tag());
  }

  return total_size;
}
size_t StreamSample_MonitorElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dqmgui.StreamSample.MonitorElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007f9) ^ 0x000007f9) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category());

    // required int32 lumibegin = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lumibegin());

    // required uint32 properties = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->properties());

    // required uint32 dataLength = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datalength());

    // required uint32 qtestLength = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qtestlength());

    // required uint32 objectLength = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectlength());

    // required double entries = 9;
    total_size += 1 + 8;

    // required uint32 tag = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .dqmgui.StreamSample.MonitorElementInfo info = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes data = 11;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes qt = 12;
    if (has_qt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSample_MonitorElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dqmgui.StreamSample.MonitorElement)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSample_MonitorElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSample_MonitorElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dqmgui.StreamSample.MonitorElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dqmgui.StreamSample.MonitorElement)
    MergeFrom(*source);
  }
}

void StreamSample_MonitorElement::MergeFrom(const StreamSample_MonitorElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dqmgui.StreamSample.MonitorElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_qt();
      qt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qt_);
    }
    if (cached_has_bits & 0x00000008u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000010u) {
      lumibegin_ = from.lumibegin_;
    }
    if (cached_has_bits & 0x00000020u) {
      properties_ = from.properties_;
    }
    if (cached_has_bits & 0x00000040u) {
      datalength_ = from.datalength_;
    }
    if (cached_has_bits & 0x00000080u) {
      qtestlength_ = from.qtestlength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      objectlength_ = from.objectlength_;
    }
    if (cached_has_bits & 0x00000200u) {
      entries_ = from.entries_;
    }
    if (cached_has_bits & 0x00000400u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamSample_MonitorElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dqmgui.StreamSample.MonitorElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSample_MonitorElement::CopyFrom(const StreamSample_MonitorElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dqmgui.StreamSample.MonitorElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSample_MonitorElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007f9) != 0x000007f9) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void StreamSample_MonitorElement::Swap(StreamSample_MonitorElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSample_MonitorElement::InternalSwap(StreamSample_MonitorElement* other) {
  using std::swap;
  info_.InternalSwap(&other->info_);
  name_.Swap(&other->name_);
  data_.Swap(&other->data_);
  qt_.Swap(&other->qt_);
  swap(category_, other->category_);
  swap(lumibegin_, other->lumibegin_);
  swap(properties_, other->properties_);
  swap(datalength_, other->datalength_);
  swap(qtestlength_, other->qtestlength_);
  swap(objectlength_, other->objectlength_);
  swap(entries_, other->entries_);
  swap(tag_, other->tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSample_MonitorElement::GetMetadata() const {
  protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamSample_MERoot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSample_MERoot::kRawdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSample_MERoot::StreamSample_MERoot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MERoot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dqmgui.StreamSample.MERoot)
}
StreamSample_MERoot::StreamSample_MERoot(const StreamSample_MERoot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rawdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rawdata()) {
    rawdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  // @@protoc_insertion_point(copy_constructor:dqmgui.StreamSample.MERoot)
}

void StreamSample_MERoot::SharedCtor() {
  _cached_size_ = 0;
  rawdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StreamSample_MERoot::~StreamSample_MERoot() {
  // @@protoc_insertion_point(destructor:dqmgui.StreamSample.MERoot)
  SharedDtor();
}

void StreamSample_MERoot::SharedDtor() {
  rawdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamSample_MERoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSample_MERoot::descriptor() {
  ::protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSample_MERoot& StreamSample_MERoot::default_instance() {
  ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_MERoot();
  return *internal_default_instance();
}

StreamSample_MERoot* StreamSample_MERoot::New(::google::protobuf::Arena* arena) const {
  StreamSample_MERoot* n = new StreamSample_MERoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSample_MERoot::Clear() {
// @@protoc_insertion_point(message_clear_start:dqmgui.StreamSample.MERoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!rawdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rawdata_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSample_MERoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dqmgui.StreamSample.MERoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes rawdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dqmgui.StreamSample.MERoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dqmgui.StreamSample.MERoot)
  return false;
#undef DO_
}

void StreamSample_MERoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dqmgui.StreamSample.MERoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes rawdata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rawdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dqmgui.StreamSample.MERoot)
}

::google::protobuf::uint8* StreamSample_MERoot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dqmgui.StreamSample.MERoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes rawdata = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rawdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dqmgui.StreamSample.MERoot)
  return target;
}

size_t StreamSample_MERoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dqmgui.StreamSample.MERoot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes rawdata = 1;
  if (has_rawdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rawdata());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSample_MERoot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dqmgui.StreamSample.MERoot)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSample_MERoot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSample_MERoot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dqmgui.StreamSample.MERoot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dqmgui.StreamSample.MERoot)
    MergeFrom(*source);
  }
}

void StreamSample_MERoot::MergeFrom(const StreamSample_MERoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dqmgui.StreamSample.MERoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rawdata()) {
    set_has_rawdata();
    rawdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
}

void StreamSample_MERoot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dqmgui.StreamSample.MERoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSample_MERoot::CopyFrom(const StreamSample_MERoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dqmgui.StreamSample.MERoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSample_MERoot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StreamSample_MERoot::Swap(StreamSample_MERoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSample_MERoot::InternalSwap(StreamSample_MERoot* other) {
  using std::swap;
  rawdata_.Swap(&other->rawdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSample_MERoot::GetMetadata() const {
  protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamSample_GenericCompressed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSample_GenericCompressed::kSizeFieldNumber;
const int StreamSample_GenericCompressed::kBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSample_GenericCompressed::StreamSample_GenericCompressed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_GenericCompressed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dqmgui.StreamSample.GenericCompressed)
}
StreamSample_GenericCompressed::StreamSample_GenericCompressed(const StreamSample_GenericCompressed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buff()) {
    buff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:dqmgui.StreamSample.GenericCompressed)
}

void StreamSample_GenericCompressed::SharedCtor() {
  _cached_size_ = 0;
  buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0u;
}

StreamSample_GenericCompressed::~StreamSample_GenericCompressed() {
  // @@protoc_insertion_point(destructor:dqmgui.StreamSample.GenericCompressed)
  SharedDtor();
}

void StreamSample_GenericCompressed::SharedDtor() {
  buff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamSample_GenericCompressed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSample_GenericCompressed::descriptor() {
  ::protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSample_GenericCompressed& StreamSample_GenericCompressed::default_instance() {
  ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample_GenericCompressed();
  return *internal_default_instance();
}

StreamSample_GenericCompressed* StreamSample_GenericCompressed::New(::google::protobuf::Arena* arena) const {
  StreamSample_GenericCompressed* n = new StreamSample_GenericCompressed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSample_GenericCompressed::Clear() {
// @@protoc_insertion_point(message_clear_start:dqmgui.StreamSample.GenericCompressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!buff_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buff_.UnsafeRawStringPointer())->clear();
  }
  size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSample_GenericCompressed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dqmgui.StreamSample.GenericCompressed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dqmgui.StreamSample.GenericCompressed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dqmgui.StreamSample.GenericCompressed)
  return false;
#undef DO_
}

void StreamSample_GenericCompressed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dqmgui.StreamSample.GenericCompressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 size = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size(), output);
  }

  // required bytes buff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dqmgui.StreamSample.GenericCompressed)
}

::google::protobuf::uint8* StreamSample_GenericCompressed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dqmgui.StreamSample.GenericCompressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size(), target);
  }

  // required bytes buff = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dqmgui.StreamSample.GenericCompressed)
  return target;
}

size_t StreamSample_GenericCompressed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dqmgui.StreamSample.GenericCompressed)
  size_t total_size = 0;

  if (has_buff()) {
    // required bytes buff = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buff());
  }

  if (has_size()) {
    // required uint32 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
size_t StreamSample_GenericCompressed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dqmgui.StreamSample.GenericCompressed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes buff = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buff());

    // required uint32 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSample_GenericCompressed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dqmgui.StreamSample.GenericCompressed)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSample_GenericCompressed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSample_GenericCompressed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dqmgui.StreamSample.GenericCompressed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dqmgui.StreamSample.GenericCompressed)
    MergeFrom(*source);
  }
}

void StreamSample_GenericCompressed::MergeFrom(const StreamSample_GenericCompressed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dqmgui.StreamSample.GenericCompressed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buff();
      buff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_);
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamSample_GenericCompressed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dqmgui.StreamSample.GenericCompressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSample_GenericCompressed::CopyFrom(const StreamSample_GenericCompressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dqmgui.StreamSample.GenericCompressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSample_GenericCompressed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StreamSample_GenericCompressed::Swap(StreamSample_GenericCompressed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSample_GenericCompressed::InternalSwap(StreamSample_GenericCompressed* other) {
  using std::swap;
  buff_.Swap(&other->buff_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSample_GenericCompressed::GetMetadata() const {
  protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamSample::InitAsDefaultInstance() {
  ::dqmgui::_StreamSample_default_instance_._instance.get_mutable()->header_c_ = const_cast< ::dqmgui::StreamSample_GenericCompressed*>(
      ::dqmgui::StreamSample_GenericCompressed::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSample::kHeaderCFieldNumber;
const int StreamSample::kMeFieldNumber;
const int StreamSample::kMeRootCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSample::StreamSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dqmgui.StreamSample)
}
StreamSample::StreamSample(const StreamSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      me_(from.me_),
      me_root_c_(from.me_root_c_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_c()) {
    header_c_ = new ::dqmgui::StreamSample_GenericCompressed(*from.header_c_);
  } else {
    header_c_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dqmgui.StreamSample)
}

void StreamSample::SharedCtor() {
  _cached_size_ = 0;
  header_c_ = NULL;
}

StreamSample::~StreamSample() {
  // @@protoc_insertion_point(destructor:dqmgui.StreamSample)
  SharedDtor();
}

void StreamSample::SharedDtor() {
  if (this != internal_default_instance()) delete header_c_;
}

void StreamSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSample::descriptor() {
  ::protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSample& StreamSample::default_instance() {
  ::protobuf_DQM_2fStreamSample_2eproto::InitDefaultsStreamSample();
  return *internal_default_instance();
}

StreamSample* StreamSample::New(::google::protobuf::Arena* arena) const {
  StreamSample* n = new StreamSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSample::Clear() {
// @@protoc_insertion_point(message_clear_start:dqmgui.StreamSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  me_.Clear();
  me_root_c_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_c_ != NULL);
    header_c_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dqmgui.StreamSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dqmgui.StreamSample.GenericCompressed header_c = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dqmgui.StreamSample.MonitorElement me = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_me()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dqmgui.StreamSample.GenericCompressed me_root_c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_me_root_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dqmgui.StreamSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dqmgui.StreamSample)
  return false;
#undef DO_
}

void StreamSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dqmgui.StreamSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .dqmgui.StreamSample.GenericCompressed header_c = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_c_, output);
  }

  // repeated .dqmgui.StreamSample.MonitorElement me = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->me_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->me(static_cast<int>(i)), output);
  }

  // repeated .dqmgui.StreamSample.GenericCompressed me_root_c = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->me_root_c_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->me_root_c(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dqmgui.StreamSample)
}

::google::protobuf::uint8* StreamSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dqmgui.StreamSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .dqmgui.StreamSample.GenericCompressed header_c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_c_, deterministic, target);
  }

  // repeated .dqmgui.StreamSample.MonitorElement me = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->me_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->me(static_cast<int>(i)), deterministic, target);
  }

  // repeated .dqmgui.StreamSample.GenericCompressed me_root_c = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->me_root_c_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->me_root_c(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dqmgui.StreamSample)
  return target;
}

size_t StreamSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dqmgui.StreamSample)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .dqmgui.StreamSample.GenericCompressed header_c = 1;
  if (has_header_c()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_c_);
  }
  // repeated .dqmgui.StreamSample.MonitorElement me = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->me_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->me(static_cast<int>(i)));
    }
  }

  // repeated .dqmgui.StreamSample.GenericCompressed me_root_c = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->me_root_c_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->me_root_c(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dqmgui.StreamSample)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dqmgui.StreamSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dqmgui.StreamSample)
    MergeFrom(*source);
  }
}

void StreamSample::MergeFrom(const StreamSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dqmgui.StreamSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  me_.MergeFrom(from.me_);
  me_root_c_.MergeFrom(from.me_root_c_);
  if (from.has_header_c()) {
    mutable_header_c()->::dqmgui::StreamSample_GenericCompressed::MergeFrom(from.header_c());
  }
}

void StreamSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dqmgui.StreamSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSample::CopyFrom(const StreamSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dqmgui.StreamSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->me())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->me_root_c())) return false;
  if (has_header_c()) {
    if (!this->header_c_->IsInitialized()) return false;
  }
  return true;
}

void StreamSample::Swap(StreamSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSample::InternalSwap(StreamSample* other) {
  using std::swap;
  me_.InternalSwap(&other->me_);
  me_root_c_.InternalSwap(&other->me_root_c_);
  swap(header_c_, other->header_c_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSample::GetMetadata() const {
  protobuf_DQM_2fStreamSample_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DQM_2fStreamSample_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dqmgui

// @@protoc_insertion_point(global_scope)
